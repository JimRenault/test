using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Sockets;
using System.Net;

namespace TCP服务器端
{
    class Program
    {
        static void Main(string[] args)
        {
            StartServerAsync();
            Console.ReadKey();
        }

        static void StartServerAsync()
        {
            Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            //127.0.0.1代表本机     10.157.195.236本机IPV4

            //IPAddress xxx.xx.xx.xx IPEndPoint xxx.xx.xx.xx:port
            //IPAddress ipAddress = new IPAddress(new byte[] { 10, 157, 195, 236 });
            IPAddress ipAddress = IPAddress.Parse("10.157.195.236");
            IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, 88);
            serverSocket.Bind(ipEndPoint);//绑定ip和端口号
            serverSocket.Listen(0);
            //Socket clientSocket = serverSocket.Accept();//接收一个客户端链接

            serverSocket.BeginAccept(AcceptCallBack, serverSocket);
            
            //接收客户端的一条消息
            //byte[] dataBuffer = new byte[1024];
            //int count = clientSocket.Receive(dataBuffer);
            //string msgReceive = Encoding.UTF8.GetString(dataBuffer, 0, count);
            //Console.WriteLine(msgReceive);

            //Console.ReadKey();
            //clientSocket.Close();
            //serverSocket.Close();
            
        }

        static void AcceptCallBack(IAsyncResult ar)
        {
            Socket serverSocket = ar.AsyncState as Socket;
            Socket clientSocket = serverSocket.EndAccept(ar);

            //向客户端发送一条消息
            string msg = "已成功与服务器端连接上... ";
            byte[] data = Encoding.UTF8.GetBytes(msg);
            clientSocket.Send(data);

            clientSocket.BeginReceive(dataBuffer, 0, 1024, SocketFlags.None, ReceiveCallBack, clientSocket);

            serverSocket.BeginAccept(AcceptCallBack, serverSocket);//下一个客户端的连接
        }

        static byte[] dataBuffer = new byte[1024];

        static void ReceiveCallBack(IAsyncResult ar)
        {
            Socket clientSocket = null;
            try
            {
                clientSocket = ar.AsyncState as Socket;
                int count = clientSocket.EndReceive(ar);
                if(count == 0 )
                {
                    clientSocket.Close();
                    return;
                }
                string msg = Encoding.UTF8.GetString(dataBuffer, 0, count);
                Console.WriteLine("从客户端收到数据：" + msg);
                clientSocket.BeginReceive(dataBuffer, 0, 1024, SocketFlags.None, ReceiveCallBack, clientSocket);//回调
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                if (clientSocket != null)
                {
                    clientSocket.Close();
                }
            }
           
        }

        //static void StartServerSync()
        //{
        //    Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        //    //127.0.0.1代表本机     10.157.195.236本机IPV4

        //    //IPAddress xxx.xx.xx.xx IPEndPoint xxx.xx.xx.xx:port
        //    //IPAddress ipAddress = new IPAddress(new byte[] { 10, 157, 195, 236 });
        //    IPAddress ipAddress = IPAddress.Parse("10.157.195.236");
        //    IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, 88);
        //    serverSocket.Bind(ipEndPoint);//绑定ip和端口号
        //    serverSocket.Listen(0);
        //    Socket clientSocket = serverSocket.Accept();//接收一个客户端链接

        //    //向客户端发送一条消息
        //    string msg = "Hello client ! 你好 ~ ";
        //    byte[] data = Encoding.UTF8.GetBytes(msg);
        //    clientSocket.Send(data);

        //    //接收客户端的一条消息
        //    byte[] dataBuffer = new byte[1024];
        //    int count = clientSocket.Receive(dataBuffer);
        //    string msgReceive = Encoding.UTF8.GetString(dataBuffer, 0, count);
        //    Console.WriteLine(msgReceive);

        //    Console.ReadKey();
        //    clientSocket.Close();
        //    serverSocket.Close();
        //}
    }
}
